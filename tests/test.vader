# TODO
#   Find what command line arguments need to be given to a vim instance in
#   order to just run these tests.


#"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""#
#                                   Motion                                    #
#"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""#
Given vsh (vsh buffer):
  vimshell: >
  vimshell: >    #echo Hello there
  vimshell: >    echo Hello there

Do (Motion down skips comments and empty lines):
  \<C-n>ix

Expect:
  vimshell: >
  vimshell: >    #echo Hello there
  vimshell: >    xecho Hello there

Do (Motion down with no extra prompts stays at end):
  \<C-n>\<C-n>ix

Expect:
  vimshell: >
  vimshell: >    #echo Hello there
  vimshell: >    xecho Hello there

Do (Moving up at start of file does nothing):
  \<C-p>ix

Expect:
  xvimshell: >
  vimshell: >    #echo Hello there
  vimshell: >    echo Hello there


Do (Moving up with no previous prompt does nothing):
  \<C-n>\<C-p>ix

Expect:
  vimshell: >
  vimshell: >    #echo Hello there
  vimshell: >    xecho Hello there


Given vsh (vsh buffer):
  vimshell: > echo Hello there
  Hello there, this is output

Do (Moving down at last prompt moves to end of output):
  \<C-n>\<C-n>ix

Expect:
  vimshell: > echo Hello there
  xHello there, this is output


Given vsh (vsh buffer):
  vimshell: > # vimshell: > ls
  vimshell: > ls

Do (Down motion includes saved output):
  \<C-n>ix

Expect:
  vimshell: > # vimshell: > xls
  vimshell: > ls

Do (Up motion includes saved output):
  \<C-n>\<C-n>\<C-p>ix

Expect:
  vimshell: > # vimshell: > xls
  vimshell: > ls


Given vsh (vsh buffer):
  vimshell: > 
  vimshell: > ls

Do (Down motion includes complete prompts without commands):
  \<C-n>ix

Expect:
  vimshell: >x 
  vimshell: > ls

Do (Up motion includes complete prompts without commands):
  \<C-n>\<C-n>\<C-p>ix

Expect:
  vimshell: >x 
  vimshell: > ls


# Tabs count as a command character
Given vsh (vsh buffer):
  vimshell: > 	ls

Do (Don't skip tabs):
  \<C-n>ix

Expect:
  vimshell: > x	ls

#"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""#
#                              Parsing Commands                               #
#"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""#
Given vsh (vsh buffer):
  vimshell: >
  vimshell: > 
  vimshell: > ls
  vimshell: >   ls
  vimshell: > 	ls
  vimshell: > # ls
  vimshell: > #ls
  vimshell: >   #ls
  vimshell: >  	#ls
  hello there


Do (Parsing Works nicely):
  :g/^/put =vsh#vsh#ParseVSHCommand(getline('.'))\<CR>

Expect:
  vimshell: >
  -1
  vimshell: > 
  -1
  vimshell: > ls
  ls
  vimshell: >   ls
    ls
  vimshell: > 	ls
  	ls
  vimshell: > # ls
  -1
  vimshell: > #ls
  -1
  vimshell: >   #ls
  -1
  vimshell: >  	#ls
   	#ls
  hello there
  -1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                Command Span                                 "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
Given vsh (vsh buffer):
  vimshell: >
  vimshell: >

  vimshell: >




  vimshell: >


Do (CommandSpan() works nicely):
  :g/vimshell/s/$/\=string(vsh#vsh#CommandSpan())\<CR>

Expect:
  vimshell: >[]
  vimshell: >[2, 3]

  vimshell: >[4, 8]




  vimshell: >[]

Given vsh (vsh buffer):
  vimshell: >
  hello there

Do (CommandSpan() Final line):
  :s/$/\=string(vsh#vsh#CommandSpan())\<CR>

Expect:
  vimshell: >[1, 2]
  hello there
