Definite things to fix:
    - Kill shell process when buffer is unloaded
        . Run on the BufUnload event
        . jobstop(b:vsh_job)
        . Don't know how to get that particular buffer.
            BufUnload knows what the buffer being closed is from '<afile>', but
            the current buffer may be different to that.
            I need to fetch a buffer-local variable from a different buffer,
            but switching to that buffer would cause problems.
    - Fix where the data is put into the buffer
        . Don't use a mark that the user can modify
    - Use python 2 as well as python 3
    - Handle broken lines
        When the output from the slave terminal flushes in the middle of a line I
        end up with a broken line in my file.
        This is because I insert linewise, and don't have any logic to handle how
        lines should be joined together.
        One problem is that the prompt of the shell will always end without a
        newline.
        Assuming I can't tell what the prompt is (any method will inherently be
        brittle because all I recieve is text, and I can't modify the shell because
        I'll want to use python and gdb REPL's) I can't programmatically tell the
        difference between a broken line and the end of output.
        I need to insert not linewise -- to mark the last character of output, and
        always insert from there.
        After each text insert I could look to see if there is a newline character
        immediately after the last output character, and if not add one there.
    - Take shell from env by default, allow choosing shell with g: variable.
    - Test cases
                Moving around
                Removing text
                Selecting text objects
    - Look into performance of large output commands


Things that may be cool.
     - Special handling of $EDITOR to use the current vim session?
         Don't know how I'd do this -- but it's something win(1) had and I
         found useful.
         Something with v:servername? Could I set an environment variable to
         pass information to the slave pseudoterminal then create a small
         program that communicates over RPC channel it finds in that
         environment variable.
         Hopefully that would mean I could open up the file to edit in another
         window of the current neovim instance.
     - Change :lcd when changing directory in the buffer
         This would mean you can use 'gf' on files from 'ls' output
         This is emulating what win(1) does.
     - Special handling of git/hg commands to use fugitive/lawrencium
         Don't think this is that good an idea to be honest: it would be
         setting a precedent for special handling of different commands which
     - Put jobresize() on an autocmd for a window resize (or if that gets
         confusing because you have to find the largest window viewing this
         buffer, on the autocmd of resizing Vim).

XXX Inherent problems in the idea
        What happens when the user removes the prompt that caused the latest
        output?
                Just put output at the end of the file -- it's not that bad.
        How should the user use interactive programs?
                Things that use ncurses should not be used.
                Programs that take user input that isn't line-buffered may be more
                important -- whatever they are.
                I can deal with it via direct calls to jobsend(), it's just whether
                to create a nice user interface to deal with it.

XXX In the future I may want an option to put output into echo area.



Strange things noticed.
1) Sometimes see output on terminal after closing neovim
   ``
   ~ [18:22:38] % vim test.vsh                                                                                                                                                         [0,1083]
   "test.vsh" "test.vsh" 87L, 3911C
   ".vim/my_plugins/vsh/autoload/vsh/vsh.py" ".vim/my_plugins/vsh/autoload/vsh/vsh.py" 78L, 2950C
   Error detected while processing function provider#python#Call:
   line     18:
   Invalid channel "1"%                                                                                                                                                                                                                                                                                                                                                                                                                            ~ [18:39:29] %                                                                                                                                                                                                                                                                                                                                                                                                                     [0,1084]
   ```

2) Can reproduce a problem with the following actions:
   ```
   vim test.vsh
   :vnew test.txt
   :bd 1
   :q
   ```
   
   Get the following output:
   ```
   ~ [19:01:48] % vim test.vsh                                                                                                                                                                                                                                                                                                                                                                                             [1,1027]
   "test.vsh" "test.vsh" 45L, 1601C
   Error detected while processing function vsh#vsh#StartSubprocess[19]..provider#python3#Call:
   line     18:
   Invalid channel "3"
   "test.txt" [New File]
   Error detected while processing function vsh#vsh#InsertText[1]..provider#python3#Call:
   line     18:
   Invalid channel "3"
   ^C
   ~ [19:03:13] %                                                                                                                                                                                                                                                                                                                                                                                                                 [130,1028]
   ```
