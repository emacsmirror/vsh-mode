#!/usr/bin/env python3

# TODO Would like to make things a little more clever (and follow the UI that
# people used to `fugitive` would expect, because that's where this is invoked
# most often).
# 1) If single other file, open in new window.
#    - Would need to edit `vsh#vsh#EditFiles` for this.
#    - Would likely also need to change vsh#vsh#RestoreArgs to close the
#      window.
# 2) When that window is closed, send some message back to this process.
#    - Fugitive sends a message back by creating a file $FUGITIVE.exit.
#    - I should be able to send a message with the current VSH buffer number,
#      and then send something to that buffer.
#    - Would need to be able to handle cancelling the editor command with the
#      relevant buffers still open.  Similar to what I'm doing here, but also
#      removing autocommands in the relevant buffers.
#    - When have multiple buffers what do I do?  Send a message to this script
#      when I've closed the last one?  As a whole 

import os
import sys

if os.getenv('NVIM') or os.getenv('NVIM_LISTEN_ADDRESS'):
    import pynvim
    nvim_socket_path = os.getenv('NVIM')
    if not nvim_socket_path:
        nvim_socket_path = os.getenv('NVIM_LISTEN_ADDRESS')
    nvim = pynvim.attach('socket', path=nvim_socket_path)

    filenames = [os.path.abspath(arg) for arg in sys.argv[1:]]
    nvim.funcs.__getattr__('vsh#vsh#EditFiles')(filenames)
    def restore():
        nvim.funcs.__getattr__('vsh#vsh#RestoreArgs')()
elif os.getenv('VSH_VIM_LISTEN_ADDRESS'):
    import socket
    import json
    import re
    origvim_socket_addr = os.getenv('VSH_VIM_LISTEN_ADDRESS')
    assert origvim_socket_addr is not None
    m = re.match(r'localhost:(\d+)', origvim_socket_addr)
    assert m
    sock = socket.socket()
    sock.connect(('localhost', int(m.groups()[0])))

    filenames = [os.path.abspath(arg) for arg in sys.argv[1:]]
    message = ["call", "vsh#vsh#EditFiles", [filenames]]
    message_str = json.dumps(message)
    sock.send(message_str.encode('utf8'))
    def restore():
        message = ["call", "vsh#vsh#RestoreArgs", []]
        message = json.dumps(message)
        sock.send(message.encode('utf8'))
else:
    print('No upper vsh process to communicate with!', file=sys.stderr)
    sys.exit(1)


# Wait until get told to finish -- with ^D is "complete", with ^C is not.
# Exiting with non-zero status, tells the process calling $EDITOR that the
# files were not edited sucessfully.
ret = None
while True:
    try:
        input('Press C-d for "successful" edit, C-c otherwise')
    except EOFError:
        ret = 0
        restore()
    except KeyboardInterrupt:
        ret = 1
        restore()
    else:
        continue
    break

sys.exit(ret)
