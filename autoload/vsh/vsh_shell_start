#!/bin/bash

# It is appealing to use an interactive shell to run this script so that the
# users bashrc can choose a different INPUTRC.  We suggest the user changing
# their .inputrc config file to have a condition for `TERM=dumb` in it and
# choosing `set editing-mode emacs` under that clause.  However we also want to
# support users changing the INPUTRC environment variable in their bashrc (on
# the principle that most people are more comfortable changing settings in
# bashrc than anywhere else).
#
# However, on experiment it seems like that comes with downsides in error cases
# which we do not think are worth the trade-off.
# See github issue #32.

# TODO Have to play around with these settings to find the most useful for vsh.
# stty -echonl -icanon -iexten isig onocr
stty tabs -onlcr icanon -echo -onlcr iexten isig -echonl -crterase

export PAGER=
export MANPAGER="$1/vsh_man_pager"

# N.b. These variables are in the `vim` environment, but not the `nvim`
# environment.  With these set some commands change their output to fit the
# size of the terminal that is reported, I don't think it's a good idea to take
# this info since the vsh file will naturally have different column widths.
unset COLUMNS
unset LINES


if [[ -n "$VSH_EMACS_BUFFER" ]]; then
    export EDITOR="emacsclient"
    vsh_buffer="$VSH_EMACS_BUFFER"
else
    export EDITOR="$1/vsh_editor_prog"
    vsh_buffer="$VSH_VIM_BUFFER"
fi

# It's really awkward to find out what the bindings are programmatically
# (or at least I don't know of a nice way to query the readline library).
completions_binding="$(bind -q possible-completions 2>/dev/null)"
glob_binding="$(bind -q glob-list-expansions 2>/dev/null)"
discard_line="$(bind -q unix-line-discard 2>/dev/null)"
# Just let any errors raise -- we'll see their stack in the buffer.
"$1/vsh_tell_editor_bindings.py" "$completions_binding" "$glob_binding" "$discard_line" "$vsh_buffer"
exec "$2"
